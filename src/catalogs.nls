;; Build option catalogs and intensity tables

to build-catalogs-from-csvs
  set options-by-type table:make
  table:put options-by-type "roof"   []
  table:put options-by-type "ground" []

  let c-mix_id  col-index options-header "mix_id"
  let c-type    col-index options-header "cell_type"
  let c-res     col-index options-header "res_pct"
  let c-nbs     col-index options-header "nbs_pct"
  let c-label   col-index options-header "label"
  if (c-mix_id = -1 or c-type = -1 or c-res = -1 or c-nbs = -1 or c-label = -1) [ stop ]

  ;; Apply max percentage constraints from sliders (values are 0..100)
  let maxr (max_pct_RES / 100)
  let maxn (max_pct_NBS / 100)

  foreach options-rows [ row ->
    let typ   item c-type  row
    let resf  (normalize-pct item c-res row)
    let nbsf  (normalize-pct item c-nbs row)
    if (resf <= maxr and nbsf <= maxn) [
      let rec  (list (item c-mix_id row)
                     resf
                     nbsf
                     (item c-label  row))
      let lst table:get options-by-type typ
      table:put options-by-type typ (lput rec lst)
    ]
  ]
  print "=== Options available after parameter configuration==="
  foreach sort table:keys options-by-type [ k ->
    let opts table:get options-by-type k
    print (word k " : " opts)
  ]

  ;; Intensities are driven by sliders now; keep table empty for any extra actions.
  set intensities table:make
end

to-report intensity-of [action]
  ;; Return [cost_per_m2 co2_per_m2]
  if action = "RES" [
    report (list cost_RES co2_reduction_RES)
  ]
  if action = "NBS" [
    let a tree_cover_area
    ifelse (a > 0)
    [ report (list (cost_NBS / a) (co2_reduction_NBS / a)) ]
    [ report (list 0 0) ]
  ]
  if table:has-key? intensities action [ report table:get intensities action ]
  user-message (word "No intensity found for action=" action)
  report [0 0]
end
