;; Python optimizer integration and plotting (uncovered spaces)

to run-optimizer-and-plot [python-exe uncovered-dir options-csv out-csv out-png budget-mode budget-steps]
  ;; Resolve effective paths even if user didn't run setup
  let unco (ifelse-value (is-string? uncovered-dir and (length uncovered-dir > 0))
               [ uncovered-dir ]
               [ ifelse-value (is-string? shapefile-path and (length shapefile-path > 0))
                   [ shapefile-path ]
                   [ "data/shapefiles/uncovered_spaces/uncovered_spaces_all.shp" ] ])
  let optp (ifelse-value (is-string? options-csv and (length options-csv > 0))
               [ options-csv ]
               [ ifelse-value (is-string? options-csv-path and (length options-csv-path > 0))
                   [ options-csv-path ]
                   [ "data/csv/options.csv" ] ])

  ;; Determine effective steps (prefer slider, else button arg, else 41)
  let bs (ifelse-value (is-number? budget_steps)
             [ budget_steps ]
             [ ifelse-value (is-number? budget-steps) [ budget-steps ] [ 41 ] ])

  ;; Debug prints: show both the slider and the computed steps
  print (word "Effective budget-steps=" bs)

  ;; write optimizer args from sliders so the script can pick them up and override defaults
  write-optimizer-args "data/outputs/optimizer_args.txt" unco optp budget-mode bs out-csv out-png
  ;; Execute wrapper script (it reads args from data/outputs/optimizer_args.txt)
  let cmd "scripts/run_optimizer.sh"
  print (word "Running script: " cmd " with uncovered=" unco " options=" optp " steps=" bs)
  let _out shell:exec cmd
  if _out != "" [ print _out ]

  ;; Plot results
  plot-optimizer-results out-csv "Cost vs CO2 (Python)"
end

;; Single-solve: maximize CO2 under a budget (uses budget-limit slider)
to run-optimizer-under-budget-and-plot [python-exe uncovered-dir options-csv out-csv out-png]
  let unco (ifelse-value (is-string? uncovered-dir and (length uncovered-dir > 0))
               [ uncovered-dir ]
               [ ifelse-value (is-string? shapefile-path and (length shapefile-path > 0))
                   [ shapefile-path ]
                   [ "data/shapefiles/uncovered_spaces/uncovered_spaces_all.shp" ] ])
  let optp (ifelse-value (is-string? options-csv and (length options-csv > 0))
               [ options-csv ]
               [ ifelse-value (is-string? options-csv-path and (length options-csv-path > 0))
                   [ options-csv-path ]
                   [ "data/csv/options.csv" ] ])
  ;; write args for single solve
  write-optimizer-budget-args "data/outputs/optimizer_args.txt" unco optp out-csv out-png budget-limit
  let cmd "scripts/run_optimizer.sh"
  print (word "Running single-solve under budget: " budget-limit)
  let _out shell:exec cmd
  if _out != "" [ print _out ]
  plot-optimizer-results out-csv "Cost vs CO2 (Python)"
end

to write-optimizer-budget-args [path uncovered-dir options-csv out-csv out-png budget_limit_value]
  file-close-all
  if file-exists? path [ file-delete path ]
  file-open path
  file-print (word "--uncovered-dir=" uncovered-dir)
  file-print (word "--options=" options-csv)
  file-print (word "--out=" out-csv)
  file-print (word "--mode=max-co2-under-budget")
  ;; also persist metadata JSON for the chosen solution
  file-print (word "--portfolios-out=" "data/outputs/solve_under_budget.json")
  ;; write detailed table CSV for the chosen solution
  file-print (word "--table-out=" "data/outputs/solve_under_budget_table.csv")
  if is-number? budget_limit_value [
    file-print (word "--budget-limit=" budget_limit_value)
  ]
  file-print (word "--cost-res=" cost_RES)
  file-print (word "--co2-res=" co2_reduction_RES)
  file-print (word "--cost-nbs=" cost_NBS)
  file-print (word "--co2-nbs=" co2_reduction_NBS)
  file-print (word "--pct-covered-by-NBS-RES=" pct_covered_by_NBS_RES)
  file-print (word "--tree-cover-area=" tree_cover_area)
  file-print (word "--max-pct-res=" max_pct_RES)
  file-print (word "--max-pct-nbs=" max_pct_NBS)
  file-close
end

to write-optimizer-args [path uncovered-dir options-csv budget-mode budget-steps out-csv out-png]
  file-close-all
  if file-exists? path [ file-delete path ]
  file-open path
  ;; Write one CLI token per line in --flag=value form for safe reading in shell
  file-print (word "--uncovered-dir=" uncovered-dir)
  file-print (word "--options=" options-csv)
  file-print (word "--out=" out-csv)
  ;; Determine step count from slider or param (no budget-mode flag)
  let bs (ifelse-value (is-number? budget_steps)
             [ budget_steps ]
             [ ifelse-value (is-number? budget-steps) [ budget-steps ] [ 41 ] ])
  file-print (word "--budget-steps=" bs)
  file-print (word "--cost-res=" cost_RES)
  file-print (word "--co2-res=" co2_reduction_RES)
  file-print (word "--cost-nbs=" cost_NBS)
  file-print (word "--co2-nbs=" co2_reduction_NBS)
  file-print (word "--pct-covered-by-NBS-RES=" pct_covered_by_NBS_RES)
  file-print (word "--tree-cover-area=" tree_cover_area)
  file-print (word "--max-pct-res=" max_pct_RES)
  file-print (word "--max-pct-nbs=" max_pct_NBS)
  file-close
end

to plot-optimizer-results [csv-path plot-name_elem]
  if not file-exists? csv-path [
    user-message (word "Results CSV not found: " csv-path)
    stop
  ]
  set-current-plot plot-name_elem
  clear-plot
  ;; ensure we plot points, not lines
  if not plot-pen-exists? "points" [ create-temporary-plot-pen "points" ]
  set-current-plot-pen "points"
  set-plot-pen-mode 2  ;; points
  file-close-all
  file-open csv-path
  if file-at-end? [ file-close stop ]
  ;; consume header
  let _header csv:from-row file-read-line
  while [ not file-at-end? ] [
    let line file-read-line
    if length line > 0 [
      let row csv:from-row line
      ;; Expect: cost,co2,n_blocks; items may already be numbers
      let cost item 0 row
      let co2  item 1 row
      if not is-number? cost [ set cost read-from-string cost ]
      if not is-number? co2  [ set co2  read-from-string co2  ]
      plotxy cost co2
    ]
  ]
  file-close
end
